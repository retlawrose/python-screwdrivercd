{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"screwdrivercd \u00b6 Python helper utilities for screwdriver CI/CD Implementing CI Pipeline templates for screwdriver? This package provides a number of useful utility scripts that can be called from CI jobs to automate common operations. Background \u00b6 Screwdriver templates that perform complicated operations can be tricky to write and test. This package contains a number of useful and tested scripts used by Yahoo/Oath/Verizon to perform steps within Screwdriver CI/CD templates. Install \u00b6 This package can be installed using the Python pip package manager that has been configured to use the Oath/Yahoo internal package repository. In order to install this package the python environment must have: Python version 3.6 or newer pip version 8.1.1 or higher setuptools 31.0.0 or higher Install this package using the Python package installer $ pip install screwdrivercd","title":"Quickstart"},{"location":"#screwdrivercd","text":"Python helper utilities for screwdriver CI/CD Implementing CI Pipeline templates for screwdriver? This package provides a number of useful utility scripts that can be called from CI jobs to automate common operations.","title":"screwdrivercd"},{"location":"#background","text":"Screwdriver templates that perform complicated operations can be tricky to write and test. This package contains a number of useful and tested scripts used by Yahoo/Oath/Verizon to perform steps within Screwdriver CI/CD templates.","title":"Background"},{"location":"#install","text":"This package can be installed using the Python pip package manager that has been configured to use the Oath/Yahoo internal package repository. In order to install this package the python environment must have: Python version 3.6 or newer pip version 8.1.1 or higher setuptools 31.0.0 or higher Install this package using the Python package installer $ pip install screwdrivercd","title":"Install"},{"location":"Code-of-Conduct/","text":"Verizon Media Open Source Code of Conduct \u00b6 Summary \u00b6 This Code of Conduct is our way to encourage good behavior and discourage bad behavior in our open source community. We invite participation from many people to bring different perspectives to support this project. We pledge to do our part to foster a welcoming and professional environment free of harassment. We expect participants to communicate professionally and thoughtfully during their involvement with this project. Participants may lose their good standing by engaging in misconduct. For example: insulting, threatening, or conveying unwelcome sexual content. We ask participants who observe conduct issues to report the incident directly to the project's Response Team at opensource-conduct@verizonmedia.com . Verizon Media will assign a respondent to address the issue. We may remove harassers from this project. This code does not replace the terms of service or acceptable use policies of the websites used to support this project. We acknowledge that participants may be subject to additional conduct terms based on their employment which may govern their online expressions. Details \u00b6 This Code of Conduct makes our expectations of participants in this community explicit. * We forbid harassment and abusive speech within this community. * We request participants to report misconduct to the project\u2019s Response Team. * We urge participants to refrain from using discussion forums to play out a fight. Expected Behaviors \u00b6 We expect participants in this community to conduct themselves professionally. Since our primary mode of communication is text on an online forum (e.g. issues, pull requests, comments, emails, or chats) devoid of vocal tone, gestures, or other context that is often vital to understanding, it is important that participants are attentive to their interaction style. Assume positive intent. We ask community members to assume positive intent on the part of other people\u2019s communications. We may disagree on details, but we expect all suggestions to be supportive of the community goals. Respect participants. We expect participants will occasionally disagree. Even if we reject an idea, we welcome everyone\u2019s participation. Open Source projects are learning experiences. Ask, explore, challenge, and then respectfully assert if you agree or disagree. If your idea is rejected, be more persuasive not bitter. Welcoming to new members. New members bring new perspectives. Some may raise questions that have been addressed before. Kindly point them to existing discussions. Everyone is new to every project once. Be kind to beginners. Beginners use open source projects to get experience. They might not be talented coders yet, and projects should not accept poor quality code. But we were all beginners once, and we need to engage kindly. Consider your impact on others. Your work will be used by others, and you depend on the work of others. We expect community members to be considerate and establish a balance their self-interest with communal interest. Use words carefully. We may not understand intent when you say something ironic. Poe\u2019s Law suggests that without an emoticon people will misinterpret sarcasm. We ask community members to communicate plainly. Leave with class. When you wish to resign from participating in this project for any reason, you are free to fork the code and create a competitive project. Open Source explicitly allows this. Your exit should not be dramatic or bitter. Unacceptable Behaviors \u00b6 Participants remain in good standing when they do not engage in misconduct or harassment. To elaborate: * Don't be a bigot. Calling out project members by their identity or background in a negative or insulting manner. This includes, but is not limited to, slurs or insinuations related to protected or suspect classes e.g. race, color, citizenship, national origin, political belief, religion, sexual orientation, gender identity and expression, age, size, culture, ethnicity, genetic features, language, profession, national minority statue, mental or physical ability. * Don't insult. Insulting remarks about a person\u2019s lifestyle practices. * Don't dox. Revealing private information about other participants without explicit permission. * Don't intimidate. Threats of violence or intimidation of any project member. * Don't creep. Unwanted sexual attention or content unsuited for the subject of this project. * Don't disrupt. Sustained disruptions in a discussion. * Let us help. Refusal to assist the Response Team to resolve an issue in the community. We do not list all forms of harassment, nor imply some forms of harassment are not worthy of action. Any participant who feels harassed or observes harassment, should report the incident. Victim of harassment should not address grievances in the public forum, as this often intensifies the problem. Report it, and let us address it off-line. Reporting Issues \u00b6 If you experience or witness misconduct, or have any other concerns about the conduct of members of this project, please report it by contacting our Response Team at opensource-conduct@verizonmedia.com who will handle your report with discretion. Your report should include: * Your preferred contact information. We cannot process anonymous reports. * Names (real or usernames) of those involved in the incident. * Your account of what occurred, and if the incident is ongoing. Please provide links to or transcripts of the publicly available records (e.g. a mailing list archive or a public IRC logger), so that we can review it. * Any additional information that may be helpful to achieve resolution. After filing a report, a representative will contact you directly to review the incident and ask additional questions. If a member of the Verizon Media Response Team is named in an incident report, that member will be recused from handling your incident. If the complaint originates from a member of the Response Team, it will be addressed by a different member of the Response Team. We will consider reports to be confidential for the purpose of protecting victims of abuse. Scope \u00b6 Verizon Media will assign a Response Team member with admin rights on the project and legal rights on the project copyright. The Response Team is empowered to restrict some privileges to the project as needed. Since this project is governed by an open source license, any participant may fork the code under the terms of the project license. The Response Team\u2019s goal is to preserve the project if possible, and will restrict or remove participation from those who disrupt the project. This code does not replace the terms of service or acceptable use policies that are provided by the websites used to support this community. Nor does this code apply to communications or actions that take place outside of the context of this community. Many participants in this project are also subject to codes of conduct based on their employment. This code is a social-contract that informs participants of our social expectations. It is not a terms of service or legal contract. License and Acknowledgment. \u00b6 This text is shared under the CC-BY-4.0 license . This code is based on a study conducted by the TODO Group of many codes used in the open source community. If you have feedback about this code, contact our Response Team at the address listed above.","title":"Code of Conduct"},{"location":"Code-of-Conduct/#verizon-media-open-source-code-of-conduct","text":"","title":"Verizon Media Open Source Code of Conduct"},{"location":"Code-of-Conduct/#summary","text":"This Code of Conduct is our way to encourage good behavior and discourage bad behavior in our open source community. We invite participation from many people to bring different perspectives to support this project. We pledge to do our part to foster a welcoming and professional environment free of harassment. We expect participants to communicate professionally and thoughtfully during their involvement with this project. Participants may lose their good standing by engaging in misconduct. For example: insulting, threatening, or conveying unwelcome sexual content. We ask participants who observe conduct issues to report the incident directly to the project's Response Team at opensource-conduct@verizonmedia.com . Verizon Media will assign a respondent to address the issue. We may remove harassers from this project. This code does not replace the terms of service or acceptable use policies of the websites used to support this project. We acknowledge that participants may be subject to additional conduct terms based on their employment which may govern their online expressions.","title":"Summary"},{"location":"Code-of-Conduct/#details","text":"This Code of Conduct makes our expectations of participants in this community explicit. * We forbid harassment and abusive speech within this community. * We request participants to report misconduct to the project\u2019s Response Team. * We urge participants to refrain from using discussion forums to play out a fight.","title":"Details"},{"location":"Code-of-Conduct/#expected-behaviors","text":"We expect participants in this community to conduct themselves professionally. Since our primary mode of communication is text on an online forum (e.g. issues, pull requests, comments, emails, or chats) devoid of vocal tone, gestures, or other context that is often vital to understanding, it is important that participants are attentive to their interaction style. Assume positive intent. We ask community members to assume positive intent on the part of other people\u2019s communications. We may disagree on details, but we expect all suggestions to be supportive of the community goals. Respect participants. We expect participants will occasionally disagree. Even if we reject an idea, we welcome everyone\u2019s participation. Open Source projects are learning experiences. Ask, explore, challenge, and then respectfully assert if you agree or disagree. If your idea is rejected, be more persuasive not bitter. Welcoming to new members. New members bring new perspectives. Some may raise questions that have been addressed before. Kindly point them to existing discussions. Everyone is new to every project once. Be kind to beginners. Beginners use open source projects to get experience. They might not be talented coders yet, and projects should not accept poor quality code. But we were all beginners once, and we need to engage kindly. Consider your impact on others. Your work will be used by others, and you depend on the work of others. We expect community members to be considerate and establish a balance their self-interest with communal interest. Use words carefully. We may not understand intent when you say something ironic. Poe\u2019s Law suggests that without an emoticon people will misinterpret sarcasm. We ask community members to communicate plainly. Leave with class. When you wish to resign from participating in this project for any reason, you are free to fork the code and create a competitive project. Open Source explicitly allows this. Your exit should not be dramatic or bitter.","title":"Expected Behaviors"},{"location":"Code-of-Conduct/#unacceptable-behaviors","text":"Participants remain in good standing when they do not engage in misconduct or harassment. To elaborate: * Don't be a bigot. Calling out project members by their identity or background in a negative or insulting manner. This includes, but is not limited to, slurs or insinuations related to protected or suspect classes e.g. race, color, citizenship, national origin, political belief, religion, sexual orientation, gender identity and expression, age, size, culture, ethnicity, genetic features, language, profession, national minority statue, mental or physical ability. * Don't insult. Insulting remarks about a person\u2019s lifestyle practices. * Don't dox. Revealing private information about other participants without explicit permission. * Don't intimidate. Threats of violence or intimidation of any project member. * Don't creep. Unwanted sexual attention or content unsuited for the subject of this project. * Don't disrupt. Sustained disruptions in a discussion. * Let us help. Refusal to assist the Response Team to resolve an issue in the community. We do not list all forms of harassment, nor imply some forms of harassment are not worthy of action. Any participant who feels harassed or observes harassment, should report the incident. Victim of harassment should not address grievances in the public forum, as this often intensifies the problem. Report it, and let us address it off-line.","title":"Unacceptable Behaviors"},{"location":"Code-of-Conduct/#reporting-issues","text":"If you experience or witness misconduct, or have any other concerns about the conduct of members of this project, please report it by contacting our Response Team at opensource-conduct@verizonmedia.com who will handle your report with discretion. Your report should include: * Your preferred contact information. We cannot process anonymous reports. * Names (real or usernames) of those involved in the incident. * Your account of what occurred, and if the incident is ongoing. Please provide links to or transcripts of the publicly available records (e.g. a mailing list archive or a public IRC logger), so that we can review it. * Any additional information that may be helpful to achieve resolution. After filing a report, a representative will contact you directly to review the incident and ask additional questions. If a member of the Verizon Media Response Team is named in an incident report, that member will be recused from handling your incident. If the complaint originates from a member of the Response Team, it will be addressed by a different member of the Response Team. We will consider reports to be confidential for the purpose of protecting victims of abuse.","title":"Reporting Issues"},{"location":"Code-of-Conduct/#scope","text":"Verizon Media will assign a Response Team member with admin rights on the project and legal rights on the project copyright. The Response Team is empowered to restrict some privileges to the project as needed. Since this project is governed by an open source license, any participant may fork the code under the terms of the project license. The Response Team\u2019s goal is to preserve the project if possible, and will restrict or remove participation from those who disrupt the project. This code does not replace the terms of service or acceptable use policies that are provided by the websites used to support this community. Nor does this code apply to communications or actions that take place outside of the context of this community. Many participants in this project are also subject to codes of conduct based on their employment. This code is a social-contract that informs participants of our social expectations. It is not a terms of service or legal contract.","title":"Scope"},{"location":"Code-of-Conduct/#license-and-acknowledgment","text":"This text is shared under the CC-BY-4.0 license . This code is based on a study conducted by the TODO Group of many codes used in the open source community. If you have feedback about this code, contact our Response Team at the address listed above.","title":"License and Acknowledgment."},{"location":"Contributing/","text":"How to contribute \u00b6 First, thanks for taking the time to contribute to our project! The following information provides a guide for making contributions. Code of Conduct \u00b6 By participating in this project, you agree to abide by the Verizon Media Code of Conduct . Everyone is welcome to submit a pull request or open an issue to improve the documentation, add improvements, or report bugs. How to Ask a Question \u00b6 If you simply have a question that needs an answer, create an issue , and label it as a question. How To Contribute \u00b6 Report a Bug or Request a Feature \u00b6 If you encounter any bugs while using this software, or want to request a new feature or enhancement, feel free to create an issue to report it, make sure you add a label to indicate what type of issue it is. Contribute Code \u00b6 Pull requests are welcome for bug fixes. If you want to implement something new, please request a feature first so we can discuss it. Creating a Pull Request \u00b6 Before you submit any code, we need you to agree to our Contributor License Agreement ; this ensures we can continue to protect your contributions under an open source license well into the future. Please follow best practices for creating git commits. When your code is ready to be submitted, you can submit a pull request to begin the code review process.","title":"Contributing"},{"location":"Contributing/#how-to-contribute","text":"First, thanks for taking the time to contribute to our project! The following information provides a guide for making contributions.","title":"How to contribute"},{"location":"Contributing/#code-of-conduct","text":"By participating in this project, you agree to abide by the Verizon Media Code of Conduct . Everyone is welcome to submit a pull request or open an issue to improve the documentation, add improvements, or report bugs.","title":"Code of Conduct"},{"location":"Contributing/#how-to-ask-a-question","text":"If you simply have a question that needs an answer, create an issue , and label it as a question.","title":"How to Ask a Question"},{"location":"Contributing/#how-to-contribute_1","text":"","title":"How To Contribute"},{"location":"Contributing/#report-a-bug-or-request-a-feature","text":"If you encounter any bugs while using this software, or want to request a new feature or enhancement, feel free to create an issue to report it, make sure you add a label to indicate what type of issue it is.","title":"Report a Bug or Request a Feature"},{"location":"Contributing/#contribute-code","text":"Pull requests are welcome for bug fixes. If you want to implement something new, please request a feature first so we can discuss it.","title":"Contribute Code"},{"location":"Contributing/#creating-a-pull-request","text":"Before you submit any code, we need you to agree to our Contributor License Agreement ; this ensures we can continue to protect your contributions under an open source license well into the future. Please follow best practices for creating git commits. When your code is ready to be submitted, you can submit a pull request to begin the code review process.","title":"Creating a Pull Request"},{"location":"Install_Dependencies/","text":"The pyproject.toml config file \u00b6 The screwdrivercd_install_deps utility is used to define global package build dependencies for multiple packaging systems in a single configuration file. Rationale \u00b6 This utility provides a single place to configure global/operating system dependencies and simplifies creating CI/CD Pipelines that install and build the same package for multiple different operating system environments in a coherent manner. Configuration \u00b6 The screwdrivercd_install_deps utility is configured using the pyproject.toml file. The pyproject.toml file is a toml format configuration file, that is defined as part of Python PEP518 to hold the python package build dependencies. All of the configuration for the screwdrivercd.installdeps package are under the is under the tool.sdv4_installdeps section which contains the configuration values for the tool as a whole and subsections that define the configuration to use for each package type. pyproject.toml tool.sdv4_installdeps configuration \u00b6 The tool.sdv4_installdeps configuration section defines settings that configure how the utility functions. fail_on_error \u00b6 Boolean (True/False) value indicating if the installer should immediately fail if a package installation fails. The default value is False [tool.sdv4_installdeps] fail_on_error = true install \u00b6 The install configuration setting is an ordered list of the package utilities to run. Optional If not provided, a default that will run all the package utilities, ordered to execute the system package utilities, followed by the global python pip3 installed packages. [tool.sdv4_installdeps] install = ['apk', 'apt-get', 'brew', 'yum', 'pip3'] Package section \u00b6 Each package tool has a setting section under the tool.sdv4_installdeps section of the pyproject.toml . Common Package settings \u00b6 All the package tools have some settings that are common among them, so the same settings have the same format irregardless of the package utility they are defined under. deps \u00b6 The deps setting is a list of package dependencies in a format based on the Python PEP 508 Package dependency specification. The specification used by the screwdrivercd.installdeps package adds environment markers which contain values from the distro package to allow specifying requirements based on attributes of the Operating System distribution. The environment markers that are supported, are: Marker Python equivalent Sample values distro_codename distro.codename() Maipo, bionic distro_id distro.id() rhel, ubuntu, darwin distro_like distro.like() fedora, debian distro_name distro.name() Darwin, Red Hat Enterprise Linux Server, Ubuntu distro_version distro.version() 7.4, 18.04, 18.6.0 implementation_name sys.implementation.name cpython implementation_version 3.4.0, 3.5.0b1 os_name os.name posix, java platform_machine platform.machine() x86_64 platform_python_implementation platform.python_implementation() CPython, Jython platform_release platform.release() 3.14.1-x86_64-linode39, 14.5.0, 1.8.0_51 platform_system platform.system() Linux, Windows, Java platform_version platform.version() #1 SMP Fri Apr 25 13:07:35 EDT 2014 Java HotSpot(TM) 64-Bit Server VM, 25.51-b03, Oracle Corporation Darwin Kernel Version 14.5.0: Wed Jul 29 02:18:53 PDT 2015; root:xnu-2782.40.9~2/RELEASE_X86_64 python_version '.'.join(platform.python_version_tuple()[:2]) 3.4, 2.7 python_full_version platform.python_version() 3.4.0, 3.5.0b1 sys_platform sys.platform linux, linux2, darwin, java1.8.0_51 (note that \"linux\" is from Python3 and \"linux2\" from Python2) For example, the snippet below will use the yum tool to install the foo_python36 package from the foo python rpm repo if the Operating System version is less than 8.0 and install the python3 package if the operating system is version 8.0 or higher. [tool.sdv4_installdeps.yum] repos . foo = 'https://foo.bar.com/foo_rpms.repo;distro_version<\"8.0\"' deps = [ 'foo_python36;distro_version<\"8.0\"' , 'python3;distro_version>=\"8.0' ] repos (Optional) \u00b6 Some package utilities have the concept of package repositories. The repos setting is a dictionary of repository name and values for repositories to add. This setting is only valid for the package utilities that have this concept. The repo setting can be used to define package repositories to add to the host configuration before installing the package dependencies. Like the deps setting, this setting supports using environment markers to specify environments to add the repositories too. For example, this snippet would add the foo yum/rpm repository before installing the packages in Operating system versions lower than 8.0. [tool.sdv4_installdeps.yum] repos . foo_rpms = 'https://foo.bar.com/foo_rpms.repo;distro_version<\"8.0\"' apk settings \u00b6 The apk utility does not support repositories. [tool.sdv4_installdeps.apk] deps = ['python3'] apt-get settings \u00b6 The apt-get tool supports both the deps and repos settings [tool.sdv4_installdeps.apt-get] repos . multiverse = 'multiverse' repos . ppa_deadsnakes = 'ppa:deadsnakes/ppa;distro_version>\"17.04\"' deps = ['python3'] repos apt-get specific values \u00b6 The apt-get repos support adding/enabling built in repos, as well as ppa and repository urls. brew settings \u00b6 The brew utility does not currently support repositories. [tool.sdv4_installdeps.brew] deps = ['python3'] yum settings \u00b6 The yum tools supports both repos and deps settings. [tool.sdv4_installdeps.yum] repos . foo_rpms = 'https://foo.bar.com/foo_rpms.repo' deps = [ 'foo_python36;distro_version<\"8.0\"' , 'python3;distro_version>=\"8.0\"' ] repos yum specific values \u00b6 The yum repos values are executed in order, so it is possible to add a repository url, then enable/disable specific repositories that where added. The yum utility configuration supports enabling/disabling repos in addition to being able to add/remove them. A repo configuration value that begins with enable: will enable the repository instead of adding it. A repo configuraiton value that begins with disable will disable the repository instead of adding it. repos . foo_rpms = 'https://foo.bar.com/foo_rpms.repo' repos . foo_rpms_disable_stable = 'disable:foo_rpms-stable' repos . foo_rpms_enable_beta = 'enable:foo_rpms-beta' pip3 settings \u00b6 The pip3 tool supports using the python pip3 command to install python packages for global, system wide use. It does not currently support repos. [tool.sdv4_installdeps.pip3] deps = ['serviceping'] Environment Settings \u00b6 Some settings for scrwedrivercd_install_deps command are specified via environment variables. The following settings are supported: Setting Default Value Description INSTALLDEPS_DEBUG False Enable verbose debug output Examples \u00b6 Here is an example that installs the mysql client package and installs the python serviceping package properly on multiple different Linux operating systems. [tool.sdv4_installdeps] install = ['apk', 'apt-get', 'yum', 'pip3'] [tool.sdv4_installdeps.apk] deps = ['mysql-client'] [tool.sdv4_installdeps.apt-get] deps = ['mysql-client'] [tool.sdv4_installdeps.brew] deps = ['mysql-utilities'] [tool.sdv4_installdeps.yum] deps = [ 'mysql;distro_version<\"7.0\"' , 'mariadb;distro_version>=\"7.0\"' ] [tool.sdv4_installdeps.pip3] deps = ['serviceping']","title":"Build Dependency Installer"},{"location":"Install_Dependencies/#the-pyprojecttoml-config-file","text":"The screwdrivercd_install_deps utility is used to define global package build dependencies for multiple packaging systems in a single configuration file.","title":"The pyproject.toml config file"},{"location":"Install_Dependencies/#rationale","text":"This utility provides a single place to configure global/operating system dependencies and simplifies creating CI/CD Pipelines that install and build the same package for multiple different operating system environments in a coherent manner.","title":"Rationale"},{"location":"Install_Dependencies/#configuration","text":"The screwdrivercd_install_deps utility is configured using the pyproject.toml file. The pyproject.toml file is a toml format configuration file, that is defined as part of Python PEP518 to hold the python package build dependencies. All of the configuration for the screwdrivercd.installdeps package are under the is under the tool.sdv4_installdeps section which contains the configuration values for the tool as a whole and subsections that define the configuration to use for each package type.","title":"Configuration"},{"location":"Install_Dependencies/#pyprojecttoml-toolsdv4_installdeps-configuration","text":"The tool.sdv4_installdeps configuration section defines settings that configure how the utility functions.","title":"pyproject.toml tool.sdv4_installdeps configuration"},{"location":"Install_Dependencies/#fail_on_error","text":"Boolean (True/False) value indicating if the installer should immediately fail if a package installation fails. The default value is False [tool.sdv4_installdeps] fail_on_error = true","title":"fail_on_error"},{"location":"Install_Dependencies/#install","text":"The install configuration setting is an ordered list of the package utilities to run. Optional If not provided, a default that will run all the package utilities, ordered to execute the system package utilities, followed by the global python pip3 installed packages. [tool.sdv4_installdeps] install = ['apk', 'apt-get', 'brew', 'yum', 'pip3']","title":"install"},{"location":"Install_Dependencies/#package-section","text":"Each package tool has a setting section under the tool.sdv4_installdeps section of the pyproject.toml .","title":"Package section"},{"location":"Install_Dependencies/#common-package-settings","text":"All the package tools have some settings that are common among them, so the same settings have the same format irregardless of the package utility they are defined under.","title":"Common Package settings"},{"location":"Install_Dependencies/#deps","text":"The deps setting is a list of package dependencies in a format based on the Python PEP 508 Package dependency specification. The specification used by the screwdrivercd.installdeps package adds environment markers which contain values from the distro package to allow specifying requirements based on attributes of the Operating System distribution. The environment markers that are supported, are: Marker Python equivalent Sample values distro_codename distro.codename() Maipo, bionic distro_id distro.id() rhel, ubuntu, darwin distro_like distro.like() fedora, debian distro_name distro.name() Darwin, Red Hat Enterprise Linux Server, Ubuntu distro_version distro.version() 7.4, 18.04, 18.6.0 implementation_name sys.implementation.name cpython implementation_version 3.4.0, 3.5.0b1 os_name os.name posix, java platform_machine platform.machine() x86_64 platform_python_implementation platform.python_implementation() CPython, Jython platform_release platform.release() 3.14.1-x86_64-linode39, 14.5.0, 1.8.0_51 platform_system platform.system() Linux, Windows, Java platform_version platform.version() #1 SMP Fri Apr 25 13:07:35 EDT 2014 Java HotSpot(TM) 64-Bit Server VM, 25.51-b03, Oracle Corporation Darwin Kernel Version 14.5.0: Wed Jul 29 02:18:53 PDT 2015; root:xnu-2782.40.9~2/RELEASE_X86_64 python_version '.'.join(platform.python_version_tuple()[:2]) 3.4, 2.7 python_full_version platform.python_version() 3.4.0, 3.5.0b1 sys_platform sys.platform linux, linux2, darwin, java1.8.0_51 (note that \"linux\" is from Python3 and \"linux2\" from Python2) For example, the snippet below will use the yum tool to install the foo_python36 package from the foo python rpm repo if the Operating System version is less than 8.0 and install the python3 package if the operating system is version 8.0 or higher. [tool.sdv4_installdeps.yum] repos . foo = 'https://foo.bar.com/foo_rpms.repo;distro_version<\"8.0\"' deps = [ 'foo_python36;distro_version<\"8.0\"' , 'python3;distro_version>=\"8.0' ]","title":"deps"},{"location":"Install_Dependencies/#repos-optional","text":"Some package utilities have the concept of package repositories. The repos setting is a dictionary of repository name and values for repositories to add. This setting is only valid for the package utilities that have this concept. The repo setting can be used to define package repositories to add to the host configuration before installing the package dependencies. Like the deps setting, this setting supports using environment markers to specify environments to add the repositories too. For example, this snippet would add the foo yum/rpm repository before installing the packages in Operating system versions lower than 8.0. [tool.sdv4_installdeps.yum] repos . foo_rpms = 'https://foo.bar.com/foo_rpms.repo;distro_version<\"8.0\"'","title":"repos (Optional)"},{"location":"Install_Dependencies/#apk-settings","text":"The apk utility does not support repositories. [tool.sdv4_installdeps.apk] deps = ['python3']","title":"apk settings"},{"location":"Install_Dependencies/#apt-get-settings","text":"The apt-get tool supports both the deps and repos settings [tool.sdv4_installdeps.apt-get] repos . multiverse = 'multiverse' repos . ppa_deadsnakes = 'ppa:deadsnakes/ppa;distro_version>\"17.04\"' deps = ['python3']","title":"apt-get settings"},{"location":"Install_Dependencies/#repos-apt-get-specific-values","text":"The apt-get repos support adding/enabling built in repos, as well as ppa and repository urls.","title":"repos apt-get specific values"},{"location":"Install_Dependencies/#brew-settings","text":"The brew utility does not currently support repositories. [tool.sdv4_installdeps.brew] deps = ['python3']","title":"brew settings"},{"location":"Install_Dependencies/#yum-settings","text":"The yum tools supports both repos and deps settings. [tool.sdv4_installdeps.yum] repos . foo_rpms = 'https://foo.bar.com/foo_rpms.repo' deps = [ 'foo_python36;distro_version<\"8.0\"' , 'python3;distro_version>=\"8.0\"' ]","title":"yum settings"},{"location":"Install_Dependencies/#repos-yum-specific-values","text":"The yum repos values are executed in order, so it is possible to add a repository url, then enable/disable specific repositories that where added. The yum utility configuration supports enabling/disabling repos in addition to being able to add/remove them. A repo configuration value that begins with enable: will enable the repository instead of adding it. A repo configuraiton value that begins with disable will disable the repository instead of adding it. repos . foo_rpms = 'https://foo.bar.com/foo_rpms.repo' repos . foo_rpms_disable_stable = 'disable:foo_rpms-stable' repos . foo_rpms_enable_beta = 'enable:foo_rpms-beta'","title":"repos yum specific values"},{"location":"Install_Dependencies/#pip3-settings","text":"The pip3 tool supports using the python pip3 command to install python packages for global, system wide use. It does not currently support repos. [tool.sdv4_installdeps.pip3] deps = ['serviceping']","title":"pip3 settings"},{"location":"Install_Dependencies/#environment-settings","text":"Some settings for scrwedrivercd_install_deps command are specified via environment variables. The following settings are supported: Setting Default Value Description INSTALLDEPS_DEBUG False Enable verbose debug output","title":"Environment Settings"},{"location":"Install_Dependencies/#examples","text":"Here is an example that installs the mysql client package and installs the python serviceping package properly on multiple different Linux operating systems. [tool.sdv4_installdeps] install = ['apk', 'apt-get', 'yum', 'pip3'] [tool.sdv4_installdeps.apk] deps = ['mysql-client'] [tool.sdv4_installdeps.apt-get] deps = ['mysql-client'] [tool.sdv4_installdeps.brew] deps = ['mysql-utilities'] [tool.sdv4_installdeps.yum] deps = [ 'mysql;distro_version<\"7.0\"' , 'mariadb;distro_version>=\"7.0\"' ] [tool.sdv4_installdeps.pip3] deps = ['serviceping']","title":"Examples"},{"location":"Validation_Helpers/","text":"Validation helpers \u00b6 Code Style Validation - screwdrivercd_validate_style \u00b6 The screwdrivercd_validate_style command runs the codestyle command from the codestyle package. Environment Settings \u00b6 All settings for the scrwedrivercd_validate_type command are specified via environment variables. The following settings are supported: Setting Default Value Description CODESTYLE_ARGS Additional codestyle command arguments PACKAGE_DIRECTORY . Directory containing the package source STYLE_CHECK_DEBUG False Enable style check debug logging Example \u00b6 This example runs the codestyle check. screwdriver.yaml - With an enforcing type check version : 4 jobs : style_check : template : python/validate_style Artifacts \u00b6 Directory Description reports/style_validation Report files generated by the codestyle command Dependency Validation - screwdrivercd_validate_deps \u00b6 The screwdriver_validate_deps command runs the safety utility to validate the package does not use package dependencies with security issues. Example \u00b6 This example runs the dependency check screwdriver.yaml - With dependency check version : 4 jobs : style_check : template : python/validate_dependencies Artifacts \u00b6 Directory Description reports/dependency_validation Report files generated by the safety command Type Validation - screwdrivercd_validate_type \u00b6 The screwdrivercd_validate_type command runs type annotation validations using the mypy tool. Environment Settings \u00b6 All settings for the scrwedrivercd_validate_type command are specified via environment variables. The following settings are supported: Setting Default Value Description BASE_PYTHON python3 Python interpreter to use MYPY_ARGS --ignore-missing-imports Additional mypy command arguments PACKAGE_DIRECTORY . Directory containing the package source TYPE_CHECK_DEBUG False Enable debug logging if True TYPE_CHECK_ENFORCING False Make check enforcing TYPE_CHECK_REPORT_FORMAT txt,cobertura-xml,junit-xml Comma seperated list of report formats to generate. Supported formats: any-exprs, cobertura-xml, html, junit-xml, linecount, linecoverage, memory, txt, xml, xslt-html, xslt-txt Example \u00b6 This example runs the type check with enforcement enabled. screwdriver.yaml - With an enforcing type check version : 4 jobs : type_check : template : python/validate_type environment : TYPE_CHECK_ENFORCING : True Artifacts \u00b6 Directory Description reports/type_validation Report files generated by the mypy command Unit Test Validation - screwdrivercd_validate_unittest \u00b6 The screwdrivercd_validate_unittest command runs unittests via the tox tool. Environment Settings \u00b6 All settings for the scrwedrivercd_validate_unittest command are specified via environment variables. The following settings are supported: Setting Default Value Description BASE_PYTHON python3 Python interpreter to use TOX_ARGS Additional tox command arguments TOX_ENVLIST Only run tests with specific envlist from the tox configuration Example \u00b6 This example runs the tox command only using a python 3.8 (py38) virtualenv. screwdriver.yaml - With unittest check version : 4 jobs : type_check : template : python/validate_unittest environment : TOX_ARGS : -v TOX_ENVLIST : py38 Artifacts \u00b6 Directory Description logs/tox All of the tox log files","title":"Validation Wrappers"},{"location":"Validation_Helpers/#validation-helpers","text":"","title":"Validation helpers"},{"location":"Validation_Helpers/#code-style-validation-screwdrivercd_validate_style","text":"The screwdrivercd_validate_style command runs the codestyle command from the codestyle package.","title":"Code Style Validation - screwdrivercd_validate_style"},{"location":"Validation_Helpers/#environment-settings","text":"All settings for the scrwedrivercd_validate_type command are specified via environment variables. The following settings are supported: Setting Default Value Description CODESTYLE_ARGS Additional codestyle command arguments PACKAGE_DIRECTORY . Directory containing the package source STYLE_CHECK_DEBUG False Enable style check debug logging","title":"Environment Settings"},{"location":"Validation_Helpers/#example","text":"This example runs the codestyle check. screwdriver.yaml - With an enforcing type check version : 4 jobs : style_check : template : python/validate_style","title":"Example"},{"location":"Validation_Helpers/#artifacts","text":"Directory Description reports/style_validation Report files generated by the codestyle command","title":"Artifacts"},{"location":"Validation_Helpers/#dependency-validation-screwdrivercd_validate_deps","text":"The screwdriver_validate_deps command runs the safety utility to validate the package does not use package dependencies with security issues.","title":"Dependency Validation - screwdrivercd_validate_deps"},{"location":"Validation_Helpers/#example_1","text":"This example runs the dependency check screwdriver.yaml - With dependency check version : 4 jobs : style_check : template : python/validate_dependencies","title":"Example"},{"location":"Validation_Helpers/#artifacts_1","text":"Directory Description reports/dependency_validation Report files generated by the safety command","title":"Artifacts"},{"location":"Validation_Helpers/#type-validation-screwdrivercd_validate_type","text":"The screwdrivercd_validate_type command runs type annotation validations using the mypy tool.","title":"Type Validation - screwdrivercd_validate_type"},{"location":"Validation_Helpers/#environment-settings_1","text":"All settings for the scrwedrivercd_validate_type command are specified via environment variables. The following settings are supported: Setting Default Value Description BASE_PYTHON python3 Python interpreter to use MYPY_ARGS --ignore-missing-imports Additional mypy command arguments PACKAGE_DIRECTORY . Directory containing the package source TYPE_CHECK_DEBUG False Enable debug logging if True TYPE_CHECK_ENFORCING False Make check enforcing TYPE_CHECK_REPORT_FORMAT txt,cobertura-xml,junit-xml Comma seperated list of report formats to generate. Supported formats: any-exprs, cobertura-xml, html, junit-xml, linecount, linecoverage, memory, txt, xml, xslt-html, xslt-txt","title":"Environment Settings"},{"location":"Validation_Helpers/#example_2","text":"This example runs the type check with enforcement enabled. screwdriver.yaml - With an enforcing type check version : 4 jobs : type_check : template : python/validate_type environment : TYPE_CHECK_ENFORCING : True","title":"Example"},{"location":"Validation_Helpers/#artifacts_2","text":"Directory Description reports/type_validation Report files generated by the mypy command","title":"Artifacts"},{"location":"Validation_Helpers/#unit-test-validation-screwdrivercd_validate_unittest","text":"The screwdrivercd_validate_unittest command runs unittests via the tox tool.","title":"Unit Test Validation - screwdrivercd_validate_unittest"},{"location":"Validation_Helpers/#environment-settings_2","text":"All settings for the scrwedrivercd_validate_unittest command are specified via environment variables. The following settings are supported: Setting Default Value Description BASE_PYTHON python3 Python interpreter to use TOX_ARGS Additional tox command arguments TOX_ENVLIST Only run tests with specific envlist from the tox configuration","title":"Environment Settings"},{"location":"Validation_Helpers/#example_3","text":"This example runs the tox command only using a python 3.8 (py38) virtualenv. screwdriver.yaml - With unittest check version : 4 jobs : type_check : template : python/validate_unittest environment : TOX_ARGS : -v TOX_ENVLIST : py38","title":"Example"},{"location":"Validation_Helpers/#artifacts_3","text":"Directory Description logs/tox All of the tox log files","title":"Artifacts"},{"location":"Versioning/","text":"Package Versioning Helper \u00b6 The versioning helper script is used to update and propagate a version for the package. This helper allows the version numbers for the package to be defined from the Screwdriver CD Pipeline. Rationale \u00b6 This allows multiple templates within a CI/CD Pipeline to use the same version number for different operations without needing to make changes to the source code repository. This makes it possible to have a single pipeline that uses templates to generate packages and containers in multiple formats that all have the same version without requiring changes to the source code repository. screwdrivercd_version usage \u00b6 The versioning wrapper command line utility is named screwdrivercd_version . usage : screwdrivercd_version [- h ] [-- force_update ] [-- version_type { default , git_revision_count , utc_date , sdv4_SD_BUILD }] [-- ignore_meta ] [-- update_meta ] optional arguments : - h , -- help show this help message and exit -- force_update Update the version in setup . cfg even if it does not have a metadata section ( default : False ) -- version_type { default , git_revision_count , utc_date , sdv4_SD_BUILD } Type of version number to generate ( default : sdv4_SD_BUILD ) -- ignore_meta Ignore the screwdriver v4 metadata ( default : False ) -- update_meta Update the screwdriver v4 metadata with a new version ( default : False ) This utility can generate a package version and store it in the screwdriver metadata package.version attribute. The --version_type defines the type of package version to generate. If no arguments are provided, the utility reads it configuration from the [screwdrivercd.version] section of the setup.cfg file. The utility will update the version of the [metadata] section of the setup.cfg file with the version number from the screwdriver pipeline package.version metadata attribute. Environment Settings \u00b6 Some settings for the scrwedrivercd_version command are specified via environment variables. The following settings are supported: Setting Default Value Description VERSION_DEBUG False Enable debug logging setup.cfg settings \u00b6 The setup.cfg go under the screwdrivercd.verison setting. Setting Default Value Description version_type git_revision_count The versioning format to generate, choices: git_revision_count - Update the last digit the number of git revisions sdv4_sd_build - Update the last digit with the value of the SD_BUILD environment variable utc_date - Generate a version based on the date, format: year.monthday.hourminutesecond sdv4_date - Generate a version based on the date and SD_BUILD environment variable, format: year.month.SD_BUILD Example \u00b6 This is an example of the setup.cfg file before and after, with the screwdrivercd_version command run from a screwdriver pipeline with a BUILD_ID of 1319. setup.cfg - Before [metadata] version = 5.0.0 [screwdrivercd.version] version_type = sdv4_SD_BUILD Output from the screwdrivercd_version command run in the CI Pipeline New version: 5.0.1319 setup.cfg - After [metadata] version = 5.0.1319 [screwdrivercd.version] version_type = sdv4_SD_BUILD","title":"Package Versioning"},{"location":"Versioning/#package-versioning-helper","text":"The versioning helper script is used to update and propagate a version for the package. This helper allows the version numbers for the package to be defined from the Screwdriver CD Pipeline.","title":"Package Versioning Helper"},{"location":"Versioning/#rationale","text":"This allows multiple templates within a CI/CD Pipeline to use the same version number for different operations without needing to make changes to the source code repository. This makes it possible to have a single pipeline that uses templates to generate packages and containers in multiple formats that all have the same version without requiring changes to the source code repository.","title":"Rationale"},{"location":"Versioning/#screwdrivercd_version-usage","text":"The versioning wrapper command line utility is named screwdrivercd_version . usage : screwdrivercd_version [- h ] [-- force_update ] [-- version_type { default , git_revision_count , utc_date , sdv4_SD_BUILD }] [-- ignore_meta ] [-- update_meta ] optional arguments : - h , -- help show this help message and exit -- force_update Update the version in setup . cfg even if it does not have a metadata section ( default : False ) -- version_type { default , git_revision_count , utc_date , sdv4_SD_BUILD } Type of version number to generate ( default : sdv4_SD_BUILD ) -- ignore_meta Ignore the screwdriver v4 metadata ( default : False ) -- update_meta Update the screwdriver v4 metadata with a new version ( default : False ) This utility can generate a package version and store it in the screwdriver metadata package.version attribute. The --version_type defines the type of package version to generate. If no arguments are provided, the utility reads it configuration from the [screwdrivercd.version] section of the setup.cfg file. The utility will update the version of the [metadata] section of the setup.cfg file with the version number from the screwdriver pipeline package.version metadata attribute.","title":"screwdrivercd_version usage"},{"location":"Versioning/#environment-settings","text":"Some settings for the scrwedrivercd_version command are specified via environment variables. The following settings are supported: Setting Default Value Description VERSION_DEBUG False Enable debug logging","title":"Environment Settings"},{"location":"Versioning/#setupcfg-settings","text":"The setup.cfg go under the screwdrivercd.verison setting. Setting Default Value Description version_type git_revision_count The versioning format to generate, choices: git_revision_count - Update the last digit the number of git revisions sdv4_sd_build - Update the last digit with the value of the SD_BUILD environment variable utc_date - Generate a version based on the date, format: year.monthday.hourminutesecond sdv4_date - Generate a version based on the date and SD_BUILD environment variable, format: year.month.SD_BUILD","title":"setup.cfg settings"},{"location":"Versioning/#example","text":"This is an example of the setup.cfg file before and after, with the screwdrivercd_version command run from a screwdriver pipeline with a BUILD_ID of 1319. setup.cfg - Before [metadata] version = 5.0.0 [screwdrivercd.version] version_type = sdv4_SD_BUILD Output from the screwdrivercd_version command run in the CI Pipeline New version: 5.0.1319 setup.cfg - After [metadata] version = 5.0.1319 [screwdrivercd.version] version_type = sdv4_SD_BUILD","title":"Example"},{"location":"changelog/","text":"Python screwdrivercd helpers changes \u00b6 screwdrivercd v0.3.716634 (2021-06-23) \u00b6 Bugfixes \u00b6 Make the type validation wrapper exit with the return code when run from the module screwdrivercd v0.3.689804 (2021-03-23) \u00b6 Bugfixes \u00b6 The type validation is fixed to honor the package_dir directive in the package if it is present screwdrivercd v0.3.675968 (2021-01-28) \u00b6 Improved Documentation \u00b6 Add the PEP508 environment markers to the screwdrivercd_install_deps command environment markers table screwdrivercd v0.3.671463 (2021-01-05) \u00b6 Features \u00b6 True otherwise screwdrivercd v0.3.171052 (2020-02-14) \u00b6 Bugfixes \u00b6 Add a new documentation plugin named mkdocs_venv which generates the mkdocs documentation in a Python virtualenv with only packages from the documentation_requires.txt file installed. screwdrivercd v0.3.170652 (2020-02-13) \u00b6 Bugfixes \u00b6 Fixed a bug where an exception during the documentation publish operation could at times not exit with a failure returncode. screwdrivercd v0.3.168985 (2020-01-21) \u00b6 Features \u00b6 Added new validation script screwdrivercd_validate_unittest that will run tests using tox. screwdrivercd v0.3.166403 (2019-12-31) \u00b6 Bugfixes \u00b6 Remove debug output from autoversioner screwdrivercd v0.3.165344 (2019-12-20) \u00b6 Bugfixes \u00b6 Make sure the python package publish still honors the PUBLISH env variable for backwards compatibility screwdrivercd v0.3.165333 (2019-12-20) \u00b6 Misc Changes \u00b6 Allow tagging a release if the screwdriver cerver has an init bookend that sets up ssh. screwdrivercd v0.3.164779 (2019-12-13) \u00b6 Bugfixes \u00b6 Fix standard_directories exception if the SD_ARTIFACTS_DIR environment variable is not defined. screwdrivercd v0.3.164508 (2019-12-11) \u00b6 Features \u00b6 Add release tagging code from the python/package_python template. screwdrivercd v0.3.164370 (2019-12-11) \u00b6 Bugfixes \u00b6 Fix the publish logic to use the correct endpoints. screwdrivercd v0.2.164187 (2019-12-10) \u00b6 Features \u00b6 Add screwdrivercd_publish_python command to handle publishing packages generated by the screwdrivercd_package_python utility. screwdrivercd v0.1.164150 (2019-12-10) \u00b6 Features \u00b6 Add changelog footer support using a FOOTER.md file in the changelog directory. Bugfixes \u00b6 Don't complain about non-changelog README.md, HEADER.md, FOOTER.md files in the changelog directory. screwdrivercd v0.1.163462 (2019-12-07) \u00b6 Bugfixes \u00b6 Fix the changelog generator to be able to get the release tags when git version 1.8.x is installed screwdrivercd v0.1.163333 (2019-12-07) \u00b6 Improved Documentation \u00b6 Add documentation for the screwdrivercd_changelog command. screwdrivercd v0.1.163222 (2019-12-06) \u00b6 Features \u00b6 Update the job status sent to the SCM when a new version is generated. screwdrivercd v0.1.161838 (2019-11-28) \u00b6 Features \u00b6 Add the ability to add a header to the generated changelogs. screwdrivercd v0.1.161820 (2019-11-28) \u00b6 Bugfixes \u00b6 Changed the tag ordering to use the ordering from the commit history. This ensures that changelog fragements get associated with the correct changes. screwdrivercd v0.1.161760 (2019-11-27) \u00b6 Features \u00b6 Add support for changelogs (#46), this adds a new command screwdrivercd_changelog that will generate a changelog based on changelog fragments in the changelog directory. This command uses the git history to determine the release the changelog fragment was added in. This changelog is written to the $SD_ARTIFACTS_DIR/report/changelog directory.","title":"Changelog"},{"location":"changelog/#python-screwdrivercd-helpers-changes","text":"","title":"Python screwdrivercd helpers changes"},{"location":"changelog/#screwdrivercd-v03716634-2021-06-23","text":"","title":"screwdrivercd v0.3.716634 (2021-06-23)"},{"location":"changelog/#bugfixes","text":"Make the type validation wrapper exit with the return code when run from the module","title":"Bugfixes"},{"location":"changelog/#screwdrivercd-v03689804-2021-03-23","text":"","title":"screwdrivercd v0.3.689804 (2021-03-23)"},{"location":"changelog/#bugfixes_1","text":"The type validation is fixed to honor the package_dir directive in the package if it is present","title":"Bugfixes"},{"location":"changelog/#screwdrivercd-v03675968-2021-01-28","text":"","title":"screwdrivercd v0.3.675968 (2021-01-28)"},{"location":"changelog/#improved-documentation","text":"Add the PEP508 environment markers to the screwdrivercd_install_deps command environment markers table","title":"Improved Documentation"},{"location":"changelog/#screwdrivercd-v03671463-2021-01-05","text":"","title":"screwdrivercd v0.3.671463 (2021-01-05)"},{"location":"changelog/#features","text":"True otherwise","title":"Features"},{"location":"changelog/#screwdrivercd-v03171052-2020-02-14","text":"","title":"screwdrivercd v0.3.171052 (2020-02-14)"},{"location":"changelog/#bugfixes_2","text":"Add a new documentation plugin named mkdocs_venv which generates the mkdocs documentation in a Python virtualenv with only packages from the documentation_requires.txt file installed.","title":"Bugfixes"},{"location":"changelog/#screwdrivercd-v03170652-2020-02-13","text":"","title":"screwdrivercd v0.3.170652 (2020-02-13)"},{"location":"changelog/#bugfixes_3","text":"Fixed a bug where an exception during the documentation publish operation could at times not exit with a failure returncode.","title":"Bugfixes"},{"location":"changelog/#screwdrivercd-v03168985-2020-01-21","text":"","title":"screwdrivercd v0.3.168985 (2020-01-21)"},{"location":"changelog/#features_1","text":"Added new validation script screwdrivercd_validate_unittest that will run tests using tox.","title":"Features"},{"location":"changelog/#screwdrivercd-v03166403-2019-12-31","text":"","title":"screwdrivercd v0.3.166403 (2019-12-31)"},{"location":"changelog/#bugfixes_4","text":"Remove debug output from autoversioner","title":"Bugfixes"},{"location":"changelog/#screwdrivercd-v03165344-2019-12-20","text":"","title":"screwdrivercd v0.3.165344 (2019-12-20)"},{"location":"changelog/#bugfixes_5","text":"Make sure the python package publish still honors the PUBLISH env variable for backwards compatibility","title":"Bugfixes"},{"location":"changelog/#screwdrivercd-v03165333-2019-12-20","text":"","title":"screwdrivercd v0.3.165333 (2019-12-20)"},{"location":"changelog/#misc-changes","text":"Allow tagging a release if the screwdriver cerver has an init bookend that sets up ssh.","title":"Misc Changes"},{"location":"changelog/#screwdrivercd-v03164779-2019-12-13","text":"","title":"screwdrivercd v0.3.164779 (2019-12-13)"},{"location":"changelog/#bugfixes_6","text":"Fix standard_directories exception if the SD_ARTIFACTS_DIR environment variable is not defined.","title":"Bugfixes"},{"location":"changelog/#screwdrivercd-v03164508-2019-12-11","text":"","title":"screwdrivercd v0.3.164508 (2019-12-11)"},{"location":"changelog/#features_2","text":"Add release tagging code from the python/package_python template.","title":"Features"},{"location":"changelog/#screwdrivercd-v03164370-2019-12-11","text":"","title":"screwdrivercd v0.3.164370 (2019-12-11)"},{"location":"changelog/#bugfixes_7","text":"Fix the publish logic to use the correct endpoints.","title":"Bugfixes"},{"location":"changelog/#screwdrivercd-v02164187-2019-12-10","text":"","title":"screwdrivercd v0.2.164187 (2019-12-10)"},{"location":"changelog/#features_3","text":"Add screwdrivercd_publish_python command to handle publishing packages generated by the screwdrivercd_package_python utility.","title":"Features"},{"location":"changelog/#screwdrivercd-v01164150-2019-12-10","text":"","title":"screwdrivercd v0.1.164150 (2019-12-10)"},{"location":"changelog/#features_4","text":"Add changelog footer support using a FOOTER.md file in the changelog directory.","title":"Features"},{"location":"changelog/#bugfixes_8","text":"Don't complain about non-changelog README.md, HEADER.md, FOOTER.md files in the changelog directory.","title":"Bugfixes"},{"location":"changelog/#screwdrivercd-v01163462-2019-12-07","text":"","title":"screwdrivercd v0.1.163462 (2019-12-07)"},{"location":"changelog/#bugfixes_9","text":"Fix the changelog generator to be able to get the release tags when git version 1.8.x is installed","title":"Bugfixes"},{"location":"changelog/#screwdrivercd-v01163333-2019-12-07","text":"","title":"screwdrivercd v0.1.163333 (2019-12-07)"},{"location":"changelog/#improved-documentation_1","text":"Add documentation for the screwdrivercd_changelog command.","title":"Improved Documentation"},{"location":"changelog/#screwdrivercd-v01163222-2019-12-06","text":"","title":"screwdrivercd v0.1.163222 (2019-12-06)"},{"location":"changelog/#features_5","text":"Update the job status sent to the SCM when a new version is generated.","title":"Features"},{"location":"changelog/#screwdrivercd-v01161838-2019-11-28","text":"","title":"screwdrivercd v0.1.161838 (2019-11-28)"},{"location":"changelog/#features_6","text":"Add the ability to add a header to the generated changelogs.","title":"Features"},{"location":"changelog/#screwdrivercd-v01161820-2019-11-28","text":"","title":"screwdrivercd v0.1.161820 (2019-11-28)"},{"location":"changelog/#bugfixes_10","text":"Changed the tag ordering to use the ordering from the commit history. This ensures that changelog fragements get associated with the correct changes.","title":"Bugfixes"},{"location":"changelog/#screwdrivercd-v01161760-2019-11-27","text":"","title":"screwdrivercd v0.1.161760 (2019-11-27)"},{"location":"changelog/#features_7","text":"Add support for changelogs (#46), this adds a new command screwdrivercd_changelog that will generate a changelog based on changelog fragments in the changelog directory. This command uses the git history to determine the release the changelog fragment was added in. This changelog is written to the $SD_ARTIFACTS_DIR/report/changelog directory.","title":"Features"},{"location":"changelog_generator/","text":"Changelog Generator \u00b6 The screwdrivercd_changelog utility is used to produce useful, summarized news files for your project. This utility reads \"news fragements\" which contain information useful to end users . It does not contain developer focused information which is contained in the git commit history. The news fragements support Markdown style text formatting. This changelog functionality is intentionally similar in function to the the popular towncrier changelog utility. Rationale \u00b6 This utility is designed to simplify the process of generating changelog documents, which document changes for the end users. This allows the git commit history to be used to document the developer focused changes. Usage \u00b6 This utility scans the git release history for release tags and associates the files in the changelog fragement directory with the release they where added. It then generates a changelog document with each release as the title and the content of each of the changelog documents added in that release as items. Settings \u00b6 The follow environment variables can be used to tune the behavior of the utility. Setting Default Value Description CHANGELOG_DIR changelog.d Directory containing the changelog news fragements CHANGELOG_FILENAME $SD_ARTIFACTS_DIR/reports/changelog/changelog.md Name of the changelog file CHANGELOG_NAME Python package name or Unknown if no package The Package/Project name for the changelog CHANGELOG_ONLY_VERSION_TAGS True Only consider tags that begin with the letter 'v' to be release tags CHANGELOG_RELEASES all Release to generate in the changelog or \"all\" to have the log have all releases Changelog header \u00b6 A markdown format changelog header can be defined in a file named HEADER.md in the changelog directory. Changelog Fragement Files \u00b6 Changelog fragments are Markdown format files in the changelog directory. These file are named in the following format: {issuenum}.{changetype}.md issuenum - Is the issue number for the change, this can be any valid string that does not contain a period. changetype - Is the type of change, it can be one of the following: feature - A new feature bugfix - The change fixes a bug doc - The change is an improvement to the documentation removal - The changed involved removing code or features misc - Other kinds of changes Example \u00b6 Write a changelog for the current git repository to a file named docs/changelog.md Command $ export CHANGELOG_FILENAME = \"docs/changelog.md\" $ screwdrivercd_changelog docs/changelog.md Python screwdrivercd helpers changes \u00b6 screwdrivercd v0.1.159685 (2019-11-26) \u00b6 Features \u00b6 Add support for changelogs (#46), this adds a new command screwdrivercd_changelog that will generate a changelog based on changelog fragments in the changelog directory. This command uses the git history to determine the release the changelog fragment was added in. This changelog is written to the $SD_ARTIFACTS_DIR/report/changelog directory.","title":"Changelog Generator"},{"location":"changelog_generator/#changelog-generator","text":"The screwdrivercd_changelog utility is used to produce useful, summarized news files for your project. This utility reads \"news fragements\" which contain information useful to end users . It does not contain developer focused information which is contained in the git commit history. The news fragements support Markdown style text formatting. This changelog functionality is intentionally similar in function to the the popular towncrier changelog utility.","title":"Changelog Generator"},{"location":"changelog_generator/#rationale","text":"This utility is designed to simplify the process of generating changelog documents, which document changes for the end users. This allows the git commit history to be used to document the developer focused changes.","title":"Rationale"},{"location":"changelog_generator/#usage","text":"This utility scans the git release history for release tags and associates the files in the changelog fragement directory with the release they where added. It then generates a changelog document with each release as the title and the content of each of the changelog documents added in that release as items.","title":"Usage"},{"location":"changelog_generator/#settings","text":"The follow environment variables can be used to tune the behavior of the utility. Setting Default Value Description CHANGELOG_DIR changelog.d Directory containing the changelog news fragements CHANGELOG_FILENAME $SD_ARTIFACTS_DIR/reports/changelog/changelog.md Name of the changelog file CHANGELOG_NAME Python package name or Unknown if no package The Package/Project name for the changelog CHANGELOG_ONLY_VERSION_TAGS True Only consider tags that begin with the letter 'v' to be release tags CHANGELOG_RELEASES all Release to generate in the changelog or \"all\" to have the log have all releases","title":"Settings"},{"location":"changelog_generator/#changelog-header","text":"A markdown format changelog header can be defined in a file named HEADER.md in the changelog directory.","title":"Changelog header"},{"location":"changelog_generator/#changelog-fragement-files","text":"Changelog fragments are Markdown format files in the changelog directory. These file are named in the following format: {issuenum}.{changetype}.md issuenum - Is the issue number for the change, this can be any valid string that does not contain a period. changetype - Is the type of change, it can be one of the following: feature - A new feature bugfix - The change fixes a bug doc - The change is an improvement to the documentation removal - The changed involved removing code or features misc - Other kinds of changes","title":"Changelog Fragement Files"},{"location":"changelog_generator/#example","text":"Write a changelog for the current git repository to a file named docs/changelog.md Command $ export CHANGELOG_FILENAME = \"docs/changelog.md\" $ screwdrivercd_changelog docs/changelog.md","title":"Example"},{"location":"changelog_generator/#python-screwdrivercd-helpers-changes","text":"","title":"Python screwdrivercd helpers changes"},{"location":"changelog_generator/#screwdrivercd-v01159685-2019-11-26","text":"","title":"screwdrivercd v0.1.159685 (2019-11-26)"},{"location":"changelog_generator/#features","text":"Add support for changelogs (#46), this adds a new command screwdrivercd_changelog that will generate a changelog based on changelog fragments in the changelog directory. This command uses the git history to determine the release the changelog fragment was added in. This changelog is written to the $SD_ARTIFACTS_DIR/report/changelog directory.","title":"Features"},{"location":"documentation/","text":"Package Documentation Publisher \u00b6 The screwdrivercd_documentation tool is an extensible tool to publish documentation to github pages from multiple formats. Rationale \u00b6 This allows for simple templates that can generate and publish documentation published to github pages in multiple formats. This utility in addition to generating and publishing the documentation handles CI/CD operations such as cleanly handling errors and ensuging the logs and generated content is in the CI Pipeline build artifacts so they can be inspected. screwdrivercd_documentation usage \u00b6 Unlike most other screwdrivercd command line utilities, this utility can be used without having a python code package in the current repository. This utility will look for both mkdocs and sphinx documentation configuration files and generate documentation using all the tools it finds configuration files for. If using mkdocs : This template will look for the mkdocs.yml in the root of the repository and inside the docs directory. If using sphinx : This template will look for the sphinx conf.py file doc/source directory of the repository. Settings \u00b6 The follow environment variables can be used to tune the behavior of the utility. Setting Default Value Description DOCUMENTATION_DEBUG False Turn on debug logging when generating the documentation DOCUMENTATION_FORMATS mkdocs,sphinx Type of documentation to generate DOCUMENTATION_PUBLISH True Publish the generated documentation to github pages Artifacts \u00b6 The build artifacts are generated even if the documentation is not published. This allows a Pull Request to generate documentation that can be inspected in the build artifacts of the job. To assist in troubleshooting issues, the logs are always stored in the build artifacts, even if the documentation generation fails. Path Description documentation/mkdocs The documentation generated by running the mkdocs command. documentation/sphinx The documentation generated by running the sphinx command. logs/mkdocs Directory containing the logs from the mkdocs build and publish. logs/sphinx Directory containing the logs from the sphinx build and publish. The generated documentation is written into the build artifacts in the documentation/{tool} directory. So, documentation built using the mkdocs tool will be found in the build artifacts in the documentation/mkdocs directory. Note While the generated documentation content can be viewed in the screwdriver artifacts, screwdriver does not does not serve css and javascript for the documents so while content can easily be viewed aspects of the theme of the content will likely not be fully visible. The logs from generating the documentation are stored in the build_artifacts in the logs/{tool} directory. Here is an example of the artifacts from a build of documentation using the mkdocs tool:","title":"Documentation"},{"location":"documentation/#package-documentation-publisher","text":"The screwdrivercd_documentation tool is an extensible tool to publish documentation to github pages from multiple formats.","title":"Package Documentation Publisher"},{"location":"documentation/#rationale","text":"This allows for simple templates that can generate and publish documentation published to github pages in multiple formats. This utility in addition to generating and publishing the documentation handles CI/CD operations such as cleanly handling errors and ensuging the logs and generated content is in the CI Pipeline build artifacts so they can be inspected.","title":"Rationale"},{"location":"documentation/#screwdrivercd_documentation-usage","text":"Unlike most other screwdrivercd command line utilities, this utility can be used without having a python code package in the current repository. This utility will look for both mkdocs and sphinx documentation configuration files and generate documentation using all the tools it finds configuration files for. If using mkdocs : This template will look for the mkdocs.yml in the root of the repository and inside the docs directory. If using sphinx : This template will look for the sphinx conf.py file doc/source directory of the repository.","title":"screwdrivercd_documentation usage"},{"location":"documentation/#settings","text":"The follow environment variables can be used to tune the behavior of the utility. Setting Default Value Description DOCUMENTATION_DEBUG False Turn on debug logging when generating the documentation DOCUMENTATION_FORMATS mkdocs,sphinx Type of documentation to generate DOCUMENTATION_PUBLISH True Publish the generated documentation to github pages","title":"Settings"},{"location":"documentation/#artifacts","text":"The build artifacts are generated even if the documentation is not published. This allows a Pull Request to generate documentation that can be inspected in the build artifacts of the job. To assist in troubleshooting issues, the logs are always stored in the build artifacts, even if the documentation generation fails. Path Description documentation/mkdocs The documentation generated by running the mkdocs command. documentation/sphinx The documentation generated by running the sphinx command. logs/mkdocs Directory containing the logs from the mkdocs build and publish. logs/sphinx Directory containing the logs from the sphinx build and publish. The generated documentation is written into the build artifacts in the documentation/{tool} directory. So, documentation built using the mkdocs tool will be found in the build artifacts in the documentation/mkdocs directory. Note While the generated documentation content can be viewed in the screwdriver artifacts, screwdriver does not does not serve css and javascript for the documents so while content can easily be viewed aspects of the theme of the content will likely not be fully visible. The logs from generating the documentation are stored in the build_artifacts in the logs/{tool} directory. Here is an example of the artifacts from a build of documentation using the mkdocs tool:","title":"Artifacts"},{"location":"github_integration/","text":"Github integration utilites \u00b6 SSH initialization \u00b6 The screwdrivercd_ssh_setup utility initializes the ssh configuration sufficiently to start ssh-agent . This utility does not have any settings. Deploykey setup \u00b6 The screwdrivercd_github_deploykey setup utility will populate the github deploy key stored in the GIT_DEPLOY_KEY secret into the ssh-agent This utility requires that ssh-agent is already running. Secrets \u00b6 Secret Description GIT_DEPLOY_KEY Base64 encoded github deployment private key Adding a deploy key to the CI Pipeline \u00b6 Creating a new deploy key requires the ssh-keygen and base64 command line utiliites. These utilities are generally available as part of most Linux and Mac OSX systems. Step 1 - Create a new key \u00b6 First create a new pem format key without a passphrase. When prompted for a passphrase press enter. Command to create a new key called screwdrivercd_deploykey ssh-keygen -t rsa -b 4096 -C \"dev-null@screwdriver.cd\" -f screwdrivercd_deploykey Example: creating a key pem key with a filename of screwdrivercd_deploykey $ ssh-keygen -t rsa -b 4096 -C \"dev-null@screwdriver.cd\" -f screwdrivercd_deploykey Generating public/private rsa key pair. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in screwdrivercd_deploykey. Your public key has been saved in screwdrivercd_deploykey.pub. The key fingerprint is: SHA256:E49HJVZqvgeQ+4+VO9buDikq0XTPNSd+OI4OtXnLzdE dev-null@screwdriver.cd The key's randomart image is: +---[RSA 4096]----+ | o.o | | o + | | + + | | .X. + .| | oS.=o.o = | | . .+ +o=+ o| | . = O+.+E| | . . B+=o+.| | .. .o+=* o| +----[SHA256]-----+ $ Step 2 - Convert the key to pem format \u00b6 Command to convert screwdrivercd_deploykey to pem format ssh-keygen -p -N \"\" -m pem -f screwdrivercd_deploykey Example: Converting screwdrivercd_deploykey to pem format $ ssh-keygen -p -N \"\" -m pem -f screwdrivercd_deploykey Key has comment 'dev-null@screwdriver.cd' Your identification has been saved with the new passphrase. $ Step 3 - Base64 encode the pem key and paste it in the screwdriver GIT_DEPLOY_KEY secret \u00b6 Command to get the base64 string of the screwdrivercd_deploykey to paste into the screwdriver pipeline GIT_DEPLOY_KEY secret base64 screwdrivercd_deploykey Example: getting the base64 encoded string to paste into the screwdriver pipeline GIT_DEPLOY_KEY secret $ base64 screwdrivercd_deploykey LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKSndJQkFBS0NBZ0VBeDdKaEZMYVF6YXE4RkVKK29Ha2gySFg5NFhwODE4SzlERTlIM3h3WEVzM3FtQXFWClN6aTBtYUtzV3ljT21GTXhFU21SOFZPcHB3NUU0Z2l4eVNwOUFCVEh1SjFsQjQrWGRFb01KcDdqU1ozeDVaczQKRzNrRmZTbmtySGtPQW92UkhSRjdadU5zdTQxZ0JCTVdFSTlzQjBhUkRpNkJqaVQ2VHZzV2pnRDZtMmtESDZoMwprcFFwQ0ZFcGlTKzF4dDAxQkN3UHRjT3BSVG9xZlorVityTVgxa0dMajExT3FSd0crbnp6dS9lOEIrdmEzRnFUCmwxYVpFaUhZNDBCbVNhSnhKVUg0VlJYK2dGZGZlTS91dzRTQVA4NU9hR1ozZGNkU240L1d2cWlONURBSTRlWDAKUmR4VDJMOXZFM0lBUGtjeGhWNXRIKzd1djhmU0tnSUFsUStDbnlYc0c5NEVIeDk2RUJMM3FZZUdFSGo5RTFoWQpRbXRkenJWblFTaFplL05ROXJvN1FWRjE0YnI4ZVBQUGovSFQxdGRRSjc1VHYwRm91TGdYSnJlSFZIdXJieTJnCmpPOGxPZHI4eDNOYlExOEErRlllYnNtciswbm82aTRxOWNBcTI4bjJmYVM4a0haekxkM1hoR1Vzc04zMlBuQmEKTFdEaGRxYlVhL2VlODBvckxxcnJRVjd4M0dtZ2o0cnJhekgzUXVETXI2TVgvWmFoaFFsZ242cWJqR3R1c1FqNAorVmx2b2YxVXdsczFiQmQxdC9zdXQ5aXc0NlpQM0pyV3I3MkgrM1FRck9YNGMzWGRqYlpmN1BiWTFQcGZzQ3RvCkVKQlVJeWV5b29ySlU5K2NYV0xlNHRYYnJTd1I4S21TdkcxM2xPZzl1N0cwZWF3U0FuVjdoV2R5TXM4Q0F3RUEKQVFLQ0FnQTRUZFVOY0FRWDJPRzZuSnp6UVhFbmhPMFdHK0VEUEliczU1V09GRzkwLzlYN0ZGRFBxcWRSQWdxeQprS3FPekRYemJ0TVZSYzk1cUk1SFpNZ3J2ZTBNanM5WkFCZXlNQXcxMzRMWmlNYnd4TFdsVlVSV2lxSy9qWVpLCkVyK2VmQ2x6bHJCQ2JERUdHSEJQOWNtczFhTlIwZFdvTi9pVFNWM0IwdzJpOENlNGxiMHB1ZWdzemRWYjRQWmoKRmE2YzZWVy9YV1Q0akxnM0twVThZamg1UFBHbG1VbHVISkxISDMzZ05rYktZcWtEV3I2VWpuMDZtRklFU01MTQpJQ1kyOExRU0d5MlhYK0luOFhxYnA1VGNUNG1SYyt1cmgraDZycjVlK3NGRGRHYTlSY1hiVzJpcUlkc0tLNzkzCnJoYmZlRmRBRVVXWFVWakRmZVdGcnBiWGNFNFZiUEdBalZKbURnYlVmS21WQlVZSDJFNkpBYkJJTGRkYjZkQkgKcU5aT1hsbjdoVUxNeG9mdXI4NFVhaWQzVXBrdkZxdDdrYytOT0Y4VEgvNUpPajVzUzhYUGI4N0w5Z3MvWVlHZgpmRG9acHBpeUVVekp6R1d2d2xTd0p6eTNDa1dZSXdJQ1k5LytzNUVVczEvV2YwNllhbHQ5OE1XTkQvWE5rdThuCisvTGpYY3JlMjN0OHpZaHdUZHpZbzBwZXY2WjF1VEhtSC9BNXNPMHF6UnpxN3oyWkI1eWVEblpPUTFpT3J3WVMKdW1iVXBVRGxDbTIxa2RHc1o2Qjg5OWdON0NKMXhqdUJrbjRmNnRYeENNQUNHN0Y0dzl6YkxzOVRIMXYvZzVyagp1UjdDSVZMUnk1ajNZK1F4dmF1YzZoTThBYVpBOVpOQVUyalhLZE9keW42OWpUV2ZJUUtDQVFFQSs3bm9vL3JlClp5MHV2OC9STkdrUUlId20zcEVxOXFxSDYvRmJQb0g5Nkd4U0c5dzR5Z0sxVTllNzNVZlJQUmRiWjFvSWlvbFQKN21KdmswU3hTaThMV3hVS0hrclFTMEdvS0lxdG9Fck1neSszWU5nYnVsNlZCY1Z3YW50T0w0bm12cFZhMXdwQQo3czB3ekRtcHo0ejNMMWw2WmdrYTNVcmZjYSsrL2U4dzFobVRvVmNMRk5vMm9FemxJOW9kcE9PY0VPMlh2aFJKCkdYcXZNWC9CeTBiSGt5RHB0ZTk2ZlNyWVI3c2VFQ3RNZmRmZGU2SnVud2sxVWduay9uWjNtRjRBZW9ZYTgyblEKaWtQVnlpRTlWcHhWQjJIcGdLUGdPODBYcmVkSDU0SXNtZFBJMjJLMjRhaHVIeGFuSkt4VzBhTlR6MnlFN2Y1ZAp3KzF5Ny9iOHNLTk85d0tDQVFFQXl4WlZEQ3BLUmdTR25TTUFHamFCYUdjeEluTXhGYXFHSSswdzU3eUQ0VVVaCk9oM3grOG5pYzhTZFJuZkRxanBJbnl0RGdxbGdVemJreExXRGxESjd6Ynk2REN4Q29LRmFmYlBJeDJDRUppNjcKdzBiSHdJaXFneVJNMllsR05md3JHSHZNekNyT3QvS1NUUmw5MCt6czV2SCtUdEhIL0EycFBGWmZTdkdoNmY1UAp1SEY5UExFZ3dNM292c0Jka1A2aEl2SjRtWlkwcHl4OTNWQXI3T2Ftcm1LMEJqSXdnVmhudk1zK1g4eW10TWNHClFuQ3BHb1ZmNVZETEJlZGluckJRSkRqNGpYUGRPOUdpNGVVbHg1YWhMbGt6Tk5UWHRXR2dSczRORk1zajFla2YKVU9OMHJWcmY3Y3BtckVXYVJVT0dFT3JZaEsrUDFKanhNV01QdGhKTTZRS0NBUUJZc3lDVHI1Rnd2ODRLVHJ0RQpBWVZxUFBVaFZmdlNvVEoxNUQwbm9IeU15cWFBSkxCcUZsdzRwL3NOdFFHNHlpTXVIdDZGbW5CVnZwL2NQOGROCkFaaTV4b2NqTjIrQUpTbVE1NVRZdDZLcTAwU0Z2b0Mrd2hjMnltU2JVTW16SEorUEptZTFBR3J5K3FDb1JlVmQKT2luYnFHYmx6MjJFN3A0Zm5ETHJuYjRTb3o2UENuSGdMaWd6Z2dUNEJpS04rSm9FcVFQZ09adXNlN3VCOEtlago3bFBpdHlWRE01aHd4SWtqZFg3WmFiaHhXNEF5MFlDelQzWlhheDhpdnpIVEljUi9hQVBWSThNVkJXUXU3bG1ECnpHQjEwbjJLRTdTdXZjMExQVVRzQWNXZmlxM3JDRFN5L1R1WWZzMzBzVG1DYzAvVDlrUTg3SFd6MVZhNzBjY20Kb3RUdkFvSUJBRDIzVDZrZXdPdCtQSnBNSkovU3FJamRzeVRROUwyczBJN2lhZFpDaDZGUnFsVHEvTHFUbzJtaQorbGlMMUw1S2IvOU8ybmsrbDdNeUgxdFgvZUJ2WndnaXJqYzh6QktjZGk5MUR6TG50Y0VVdXFLaFE5clNyVjZsCkRXV2VQZVB4K2ZhNnlJWFRESGNDRkV1eHozY3pyTnFSOThKa0plNEhDTUw1VElRdDRoS0Y0aHdmQVB3TXAvTnYKbjZjNE5qYjE2bW9BWFgzdkU1a3FBQ1hkVXp2dTdBQmFwbktybGVuNHY2Mno1Z1NlNEpwWFVTT25zUHdLUkJZZgo4MUtiK25CWERFTzF2SExnSHY4cXVlRUVEZk1WWjIzNlZZRmNuU0RWeGlzK091Tnl5RFVkWHhMcHpHOVNDbkxzCjZ6NjIrQ2JNV2xXUnlMS3AxMyszNnJRamNvYldFT0VDZ2dFQVBJQ1FoYUt0STNUS0UrdFRzdFlvMVZZSDhwT04KSkZCZytSNFB6UnFXTWNHV0VSeVRmU0dDb1NzM0YyY0R5cHZXZG02bGRxRGNJVkw3MWxSdjF4d3IvRUFmeThhSwptY3haZ0VyYTZOSU14RFc3S2hjWUNiTjJBZ0RTc2dnMmtRbkR5NThHNmNiVW9ncGI3S0JtWVl4K0FjLzZ0Mnd0ClZkdGNXbTA3MXE4TE5qTms0Z0hRaHR6eE1VcmxkeDNhRGE0cXFYRHQveUFUbjlHSkx2THpTY3VTOHZYTnhDQXUKSkhVbTU0Z3RQR2pHWGpkb3pZUXE0cWI0T3oxcHJncXVFMGx6Mnd2bWRDWkE3RkZ3b2VGLzJ3MFFmSjBuZ1BkTwphSUtaaThYZElmM0FFc1pQcVhaYmcxdk1Nelh0b0pHVVpjVGJPVllVYzNyMXRqNHYvS01SR01BSHlBPT0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K $ Step 4 - Get the contents of the new public key and paste it into a new github deploy_key \u00b6 Command to get the screwdrivercd_deploykey.pub key to paste into the github new deploy key window cat screwdrivercd_deploykey.pub Example: Get the screwdrivercd_deploykey.pub key to past into the github new deploy key window $ cat screwdrivercd_deploykey.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDHsmEUtpDNqrwUQn6gaSHYdf3henzXwr0MT0ffHBcSzeqYCpVLOLSZoqxbJw6YUzERKZHxU6mnDkTiCLHJKn0AFMe4nWUHj5d0SgwmnuNJnfHlmzgbeQV9KeSseQ4Ci9EdEXtm42y7jWAEExYQj2wHRpEOLoGOJPpO+xaOAPqbaQMfqHeSlCkIUSmJL7XG3TUELA+1w6lFOip9n5X6sxfWQYuPXU6pHAb6fPO797wH69rcWpOXVpkSIdjjQGZJonElQfhVFf6AV194z+7DhIA/zk5oZnd1x1Kfj9a+qI3kMAjh5fRF3FPYv28TcgA+RzGFXm0f7u6/x9IqAgCVD4KfJewb3gQfH3oQEveph4YQeP0TWFhCa13OtWdBKFl781D2ujtBUXXhuvx488+P8dPW11AnvlO/QWi4uBcmt4dUe6tvLaCM7yU52vzHc1tDXwD4Vh5uyav7SejqLir1wCrbyfZ9pLyQdnMt3deEZSyw3fY+cFotYOF2ptRr957zSisuqutBXvHcaaCPiutrMfdC4Myvoxf9lqGFCWCfqpuMa26xCPj5WW+h/VTCWzVsF3W3+y632LDjpk/cmtavvYf7dBCs5fhzdd2Ntl/s9tjU+l+wK2gQkFQjJ7KiislT35xdYt7i1dutLBHwqZK8bXeU6D27sbR5rBICdXuFZ3Iyzw== dev-null@screwdriver.cd $","title":"Github"},{"location":"github_integration/#github-integration-utilites","text":"","title":"Github integration utilites"},{"location":"github_integration/#ssh-initialization","text":"The screwdrivercd_ssh_setup utility initializes the ssh configuration sufficiently to start ssh-agent . This utility does not have any settings.","title":"SSH initialization"},{"location":"github_integration/#deploykey-setup","text":"The screwdrivercd_github_deploykey setup utility will populate the github deploy key stored in the GIT_DEPLOY_KEY secret into the ssh-agent This utility requires that ssh-agent is already running.","title":"Deploykey setup"},{"location":"github_integration/#secrets","text":"Secret Description GIT_DEPLOY_KEY Base64 encoded github deployment private key","title":"Secrets"},{"location":"github_integration/#adding-a-deploy-key-to-the-ci-pipeline","text":"Creating a new deploy key requires the ssh-keygen and base64 command line utiliites. These utilities are generally available as part of most Linux and Mac OSX systems.","title":"Adding a deploy key to the CI Pipeline"},{"location":"github_integration/#step-1-create-a-new-key","text":"First create a new pem format key without a passphrase. When prompted for a passphrase press enter. Command to create a new key called screwdrivercd_deploykey ssh-keygen -t rsa -b 4096 -C \"dev-null@screwdriver.cd\" -f screwdrivercd_deploykey Example: creating a key pem key with a filename of screwdrivercd_deploykey $ ssh-keygen -t rsa -b 4096 -C \"dev-null@screwdriver.cd\" -f screwdrivercd_deploykey Generating public/private rsa key pair. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in screwdrivercd_deploykey. Your public key has been saved in screwdrivercd_deploykey.pub. The key fingerprint is: SHA256:E49HJVZqvgeQ+4+VO9buDikq0XTPNSd+OI4OtXnLzdE dev-null@screwdriver.cd The key's randomart image is: +---[RSA 4096]----+ | o.o | | o + | | + + | | .X. + .| | oS.=o.o = | | . .+ +o=+ o| | . = O+.+E| | . . B+=o+.| | .. .o+=* o| +----[SHA256]-----+ $","title":"Step 1 - Create a new key"},{"location":"github_integration/#step-2-convert-the-key-to-pem-format","text":"Command to convert screwdrivercd_deploykey to pem format ssh-keygen -p -N \"\" -m pem -f screwdrivercd_deploykey Example: Converting screwdrivercd_deploykey to pem format $ ssh-keygen -p -N \"\" -m pem -f screwdrivercd_deploykey Key has comment 'dev-null@screwdriver.cd' Your identification has been saved with the new passphrase. $","title":"Step 2 - Convert the key to pem format"},{"location":"github_integration/#step-3-base64-encode-the-pem-key-and-paste-it-in-the-screwdriver-git_deploy_key-secret","text":"Command to get the base64 string of the screwdrivercd_deploykey to paste into the screwdriver pipeline GIT_DEPLOY_KEY secret base64 screwdrivercd_deploykey Example: getting the base64 encoded string to paste into the screwdriver pipeline GIT_DEPLOY_KEY secret $ base64 screwdrivercd_deploykey LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKSndJQkFBS0NBZ0VBeDdKaEZMYVF6YXE4RkVKK29Ha2gySFg5NFhwODE4SzlERTlIM3h3WEVzM3FtQXFWClN6aTBtYUtzV3ljT21GTXhFU21SOFZPcHB3NUU0Z2l4eVNwOUFCVEh1SjFsQjQrWGRFb01KcDdqU1ozeDVaczQKRzNrRmZTbmtySGtPQW92UkhSRjdadU5zdTQxZ0JCTVdFSTlzQjBhUkRpNkJqaVQ2VHZzV2pnRDZtMmtESDZoMwprcFFwQ0ZFcGlTKzF4dDAxQkN3UHRjT3BSVG9xZlorVityTVgxa0dMajExT3FSd0crbnp6dS9lOEIrdmEzRnFUCmwxYVpFaUhZNDBCbVNhSnhKVUg0VlJYK2dGZGZlTS91dzRTQVA4NU9hR1ozZGNkU240L1d2cWlONURBSTRlWDAKUmR4VDJMOXZFM0lBUGtjeGhWNXRIKzd1djhmU0tnSUFsUStDbnlYc0c5NEVIeDk2RUJMM3FZZUdFSGo5RTFoWQpRbXRkenJWblFTaFplL05ROXJvN1FWRjE0YnI4ZVBQUGovSFQxdGRRSjc1VHYwRm91TGdYSnJlSFZIdXJieTJnCmpPOGxPZHI4eDNOYlExOEErRlllYnNtciswbm82aTRxOWNBcTI4bjJmYVM4a0haekxkM1hoR1Vzc04zMlBuQmEKTFdEaGRxYlVhL2VlODBvckxxcnJRVjd4M0dtZ2o0cnJhekgzUXVETXI2TVgvWmFoaFFsZ242cWJqR3R1c1FqNAorVmx2b2YxVXdsczFiQmQxdC9zdXQ5aXc0NlpQM0pyV3I3MkgrM1FRck9YNGMzWGRqYlpmN1BiWTFQcGZzQ3RvCkVKQlVJeWV5b29ySlU5K2NYV0xlNHRYYnJTd1I4S21TdkcxM2xPZzl1N0cwZWF3U0FuVjdoV2R5TXM4Q0F3RUEKQVFLQ0FnQTRUZFVOY0FRWDJPRzZuSnp6UVhFbmhPMFdHK0VEUEliczU1V09GRzkwLzlYN0ZGRFBxcWRSQWdxeQprS3FPekRYemJ0TVZSYzk1cUk1SFpNZ3J2ZTBNanM5WkFCZXlNQXcxMzRMWmlNYnd4TFdsVlVSV2lxSy9qWVpLCkVyK2VmQ2x6bHJCQ2JERUdHSEJQOWNtczFhTlIwZFdvTi9pVFNWM0IwdzJpOENlNGxiMHB1ZWdzemRWYjRQWmoKRmE2YzZWVy9YV1Q0akxnM0twVThZamg1UFBHbG1VbHVISkxISDMzZ05rYktZcWtEV3I2VWpuMDZtRklFU01MTQpJQ1kyOExRU0d5MlhYK0luOFhxYnA1VGNUNG1SYyt1cmgraDZycjVlK3NGRGRHYTlSY1hiVzJpcUlkc0tLNzkzCnJoYmZlRmRBRVVXWFVWakRmZVdGcnBiWGNFNFZiUEdBalZKbURnYlVmS21WQlVZSDJFNkpBYkJJTGRkYjZkQkgKcU5aT1hsbjdoVUxNeG9mdXI4NFVhaWQzVXBrdkZxdDdrYytOT0Y4VEgvNUpPajVzUzhYUGI4N0w5Z3MvWVlHZgpmRG9acHBpeUVVekp6R1d2d2xTd0p6eTNDa1dZSXdJQ1k5LytzNUVVczEvV2YwNllhbHQ5OE1XTkQvWE5rdThuCisvTGpYY3JlMjN0OHpZaHdUZHpZbzBwZXY2WjF1VEhtSC9BNXNPMHF6UnpxN3oyWkI1eWVEblpPUTFpT3J3WVMKdW1iVXBVRGxDbTIxa2RHc1o2Qjg5OWdON0NKMXhqdUJrbjRmNnRYeENNQUNHN0Y0dzl6YkxzOVRIMXYvZzVyagp1UjdDSVZMUnk1ajNZK1F4dmF1YzZoTThBYVpBOVpOQVUyalhLZE9keW42OWpUV2ZJUUtDQVFFQSs3bm9vL3JlClp5MHV2OC9STkdrUUlId20zcEVxOXFxSDYvRmJQb0g5Nkd4U0c5dzR5Z0sxVTllNzNVZlJQUmRiWjFvSWlvbFQKN21KdmswU3hTaThMV3hVS0hrclFTMEdvS0lxdG9Fck1neSszWU5nYnVsNlZCY1Z3YW50T0w0bm12cFZhMXdwQQo3czB3ekRtcHo0ejNMMWw2WmdrYTNVcmZjYSsrL2U4dzFobVRvVmNMRk5vMm9FemxJOW9kcE9PY0VPMlh2aFJKCkdYcXZNWC9CeTBiSGt5RHB0ZTk2ZlNyWVI3c2VFQ3RNZmRmZGU2SnVud2sxVWduay9uWjNtRjRBZW9ZYTgyblEKaWtQVnlpRTlWcHhWQjJIcGdLUGdPODBYcmVkSDU0SXNtZFBJMjJLMjRhaHVIeGFuSkt4VzBhTlR6MnlFN2Y1ZAp3KzF5Ny9iOHNLTk85d0tDQVFFQXl4WlZEQ3BLUmdTR25TTUFHamFCYUdjeEluTXhGYXFHSSswdzU3eUQ0VVVaCk9oM3grOG5pYzhTZFJuZkRxanBJbnl0RGdxbGdVemJreExXRGxESjd6Ynk2REN4Q29LRmFmYlBJeDJDRUppNjcKdzBiSHdJaXFneVJNMllsR05md3JHSHZNekNyT3QvS1NUUmw5MCt6czV2SCtUdEhIL0EycFBGWmZTdkdoNmY1UAp1SEY5UExFZ3dNM292c0Jka1A2aEl2SjRtWlkwcHl4OTNWQXI3T2Ftcm1LMEJqSXdnVmhudk1zK1g4eW10TWNHClFuQ3BHb1ZmNVZETEJlZGluckJRSkRqNGpYUGRPOUdpNGVVbHg1YWhMbGt6Tk5UWHRXR2dSczRORk1zajFla2YKVU9OMHJWcmY3Y3BtckVXYVJVT0dFT3JZaEsrUDFKanhNV01QdGhKTTZRS0NBUUJZc3lDVHI1Rnd2ODRLVHJ0RQpBWVZxUFBVaFZmdlNvVEoxNUQwbm9IeU15cWFBSkxCcUZsdzRwL3NOdFFHNHlpTXVIdDZGbW5CVnZwL2NQOGROCkFaaTV4b2NqTjIrQUpTbVE1NVRZdDZLcTAwU0Z2b0Mrd2hjMnltU2JVTW16SEorUEptZTFBR3J5K3FDb1JlVmQKT2luYnFHYmx6MjJFN3A0Zm5ETHJuYjRTb3o2UENuSGdMaWd6Z2dUNEJpS04rSm9FcVFQZ09adXNlN3VCOEtlago3bFBpdHlWRE01aHd4SWtqZFg3WmFiaHhXNEF5MFlDelQzWlhheDhpdnpIVEljUi9hQVBWSThNVkJXUXU3bG1ECnpHQjEwbjJLRTdTdXZjMExQVVRzQWNXZmlxM3JDRFN5L1R1WWZzMzBzVG1DYzAvVDlrUTg3SFd6MVZhNzBjY20Kb3RUdkFvSUJBRDIzVDZrZXdPdCtQSnBNSkovU3FJamRzeVRROUwyczBJN2lhZFpDaDZGUnFsVHEvTHFUbzJtaQorbGlMMUw1S2IvOU8ybmsrbDdNeUgxdFgvZUJ2WndnaXJqYzh6QktjZGk5MUR6TG50Y0VVdXFLaFE5clNyVjZsCkRXV2VQZVB4K2ZhNnlJWFRESGNDRkV1eHozY3pyTnFSOThKa0plNEhDTUw1VElRdDRoS0Y0aHdmQVB3TXAvTnYKbjZjNE5qYjE2bW9BWFgzdkU1a3FBQ1hkVXp2dTdBQmFwbktybGVuNHY2Mno1Z1NlNEpwWFVTT25zUHdLUkJZZgo4MUtiK25CWERFTzF2SExnSHY4cXVlRUVEZk1WWjIzNlZZRmNuU0RWeGlzK091Tnl5RFVkWHhMcHpHOVNDbkxzCjZ6NjIrQ2JNV2xXUnlMS3AxMyszNnJRamNvYldFT0VDZ2dFQVBJQ1FoYUt0STNUS0UrdFRzdFlvMVZZSDhwT04KSkZCZytSNFB6UnFXTWNHV0VSeVRmU0dDb1NzM0YyY0R5cHZXZG02bGRxRGNJVkw3MWxSdjF4d3IvRUFmeThhSwptY3haZ0VyYTZOSU14RFc3S2hjWUNiTjJBZ0RTc2dnMmtRbkR5NThHNmNiVW9ncGI3S0JtWVl4K0FjLzZ0Mnd0ClZkdGNXbTA3MXE4TE5qTms0Z0hRaHR6eE1VcmxkeDNhRGE0cXFYRHQveUFUbjlHSkx2THpTY3VTOHZYTnhDQXUKSkhVbTU0Z3RQR2pHWGpkb3pZUXE0cWI0T3oxcHJncXVFMGx6Mnd2bWRDWkE3RkZ3b2VGLzJ3MFFmSjBuZ1BkTwphSUtaaThYZElmM0FFc1pQcVhaYmcxdk1Nelh0b0pHVVpjVGJPVllVYzNyMXRqNHYvS01SR01BSHlBPT0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K $","title":"Step 3 - Base64 encode the pem key and paste it in the screwdriver GIT_DEPLOY_KEY secret"},{"location":"github_integration/#step-4-get-the-contents-of-the-new-public-key-and-paste-it-into-a-new-github-deploy_key","text":"Command to get the screwdrivercd_deploykey.pub key to paste into the github new deploy key window cat screwdrivercd_deploykey.pub Example: Get the screwdrivercd_deploykey.pub key to past into the github new deploy key window $ cat screwdrivercd_deploykey.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDHsmEUtpDNqrwUQn6gaSHYdf3henzXwr0MT0ffHBcSzeqYCpVLOLSZoqxbJw6YUzERKZHxU6mnDkTiCLHJKn0AFMe4nWUHj5d0SgwmnuNJnfHlmzgbeQV9KeSseQ4Ci9EdEXtm42y7jWAEExYQj2wHRpEOLoGOJPpO+xaOAPqbaQMfqHeSlCkIUSmJL7XG3TUELA+1w6lFOip9n5X6sxfWQYuPXU6pHAb6fPO797wH69rcWpOXVpkSIdjjQGZJonElQfhVFf6AV194z+7DhIA/zk5oZnd1x1Kfj9a+qI3kMAjh5fRF3FPYv28TcgA+RzGFXm0f7u6/x9IqAgCVD4KfJewb3gQfH3oQEveph4YQeP0TWFhCa13OtWdBKFl781D2ujtBUXXhuvx488+P8dPW11AnvlO/QWi4uBcmt4dUe6tvLaCM7yU52vzHc1tDXwD4Vh5uyav7SejqLir1wCrbyfZ9pLyQdnMt3deEZSyw3fY+cFotYOF2ptRr957zSisuqutBXvHcaaCPiutrMfdC4Myvoxf9lqGFCWCfqpuMa26xCPj5WW+h/VTCWzVsF3W3+y632LDjpk/cmtavvYf7dBCs5fhzdd2Ntl/s9tjU+l+wK2gQkFQjJ7KiislT35xdYt7i1dutLBHwqZK8bXeU6D27sbR5rBICdXuFZ3Iyzw== dev-null@screwdriver.cd $","title":"Step 4 - Get the contents of the new public key and paste it into a new github deploy_key"},{"location":"release_tagging/","text":"The screwdrivercd_release utility is used to create a release tag in the current repository.","title":"Release Tagging"},{"location":"usage/","text":"Usage overview \u00b6 The screwdrivercd package provides a number of CI/CD helper scripts, since these scripts are intended to be used in Screwdriver CI/CD pipelines they take all arguments from environment variables and not command line arguments.","title":"Usage"},{"location":"usage/#usage-overview","text":"The screwdrivercd package provides a number of CI/CD helper scripts, since these scripts are intended to be used in Screwdriver CI/CD pipelines they take all arguments from environment variables and not command line arguments.","title":"Usage overview"}]}